name: Crystal Specs
on:
  push:
    paths:
      - '**'
      - '!**.md'
  pull_request:
    paths:
      - '**'
      - '!**.md'
jobs:
  tests:
    name: Fetch Matrix Tests
    runs-on: [ubuntu-latest]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - id: set-matrix
      run: |
        JSON="{\"include\":["
        TEST_ARRAY=$(grep -roP --no-filename 'tags: \K(\[|")(.*)(\]|")' spec/ | tr -d '[],' | tr -s '\n' ' ' | xargs -n1 | sort -u | xargs)
        TEST_ARRAY=("${TEST_ARRAY[@]/testsuite-config-lifecycle/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/testsuite-microservice/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/testsuite-all/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/disk_fill/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/chaos_container_kill/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/chaos_cpu_hog/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/pod_delete/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/pod_io_stress/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/pod_memory_hog/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/pod_network_latency/}")
        TEST_LIST=$(for i in ${TEST_ARRAY[@]}
        do
                 echo "{\"spec\":\"$i\"}," | tr -d '\n'
        done)
        TEST_LIST="${TEST_LIST%?}"
        JSON="$JSON$TEST_LIST"
        JSON="$JSON]}"

        echo "TESTS: $JSON"
        echo "::set-output name=matrix::$JSON"

  spec:
    name: Crystal Specs
    needs: [tests]
    runs-on: [ubuntu-latest]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.tests.outputs.matrix)}}
    steps:
    - name: Cleanup Tmp DIR
      run: |
        sudo rm -rf /tmp/*
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Cache crystal shards
      uses: actions/cache@v2
      env:
        cache-name: cache-crystal-shards
      with:
        path: ./lib
        key: lib-${{ hashFiles('**/shard.lock') }}
        restore-keys: |
          lib-
    - name: Install Crystal
      env:
        CRYSTAL_VERSION: 1.0.0
        CRYSTAL_URL: https://github.com/crystal-lang/crystal/releases/download
      run: |
        wget -O crystal.deb "$CRYSTAL_URL/$CRYSTAL_VERSION/crystal_$CRYSTAL_VERSION-1_amd64.deb" --progress=dot:giga; 
        sudo apt install -y --no-install-recommends \
        git \
        libssl-dev \
        libxml2-dev \
        libyaml-dev \
        libgmp-dev \
        libz-dev \
        ./crystal.deb \
        && sudo rm -rf /var/lib/apt/lists/*
    - name: Setup CNF-Conformance
      run: |
        helm repo add stable https://cncf.gitlab.io/stable
        git fetch --all --tags --force
        shards install  
        echo "RUNNER: $RUNNER_NAME"
    - name: Run Crystal Spec
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DOCKERHUB_USERNAMES: ${{ secrets.DOCKERHUB_USERNAMES }}
        DOCKERHUB_PASSWORDS: ${{ secrets.DOCKERHUB_PASSWORDS }}
        DOCKERHUB_EMAIL: ${{ secrets.DOCKERHUB_EMAIL }}
        IMAGE_REPO: ${{ secrets.IMAGE_REPO }}
      run: |
        USERNAME_ARRAY=($DOCKERHUB_USERNAMES)
        PASSWORD_ARRAY=($DOCKERHUB_PASSWORDS)
        EMAIL_ARRAY=($DOCKERHUB_EMAIL)
        IMAGE_ARRAY=($IMAGE_REPO)
        
        RANDOMIZER=$(( 0 + $RANDOM % 3 ))

        export DOCKERHUB_USERNAME=${USERNAME_ARRAY[$RANDOMIZER]}
        export DOCKERHUB_PASSWORD=${PASSWORD_ARRAY[$RANDOMIZER]}
        
        export PROTECTED_DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME
        export PROTECTED_DOCKERHUB_PASSWORD=$DOCKERHUB_PASSWORD
        export PROTECTED_DOCKERHUB_EMAIL=${EMAIL_ARRAY[$RANDOMIZER]}
        export PROTECTED_IMAGE_REPO=${IMAGE_ARRAY[$RANDOMIZER]}

        docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

        LOG_LEVEL=info crystal spec --warnings none --tag ${{ matrix.spec }} -v

    - name: Delete Cluster
      if: ${{ always() }}
      run: |
        docker container prune -f || true
        docker volume prune -f || true

